# Disables all implicit rules
.SUFFIXES:

# folders
# ADJUST baseDir to the SVN root path
#baseDir=$(HOME)/ppi-benchmark
#baseDir=/media/Galaxy/Ammar/CPI-Pipeline-new/CPI-Pipeline-master/scripts/ppi-benchmark
baseDir=/home/ammar/CPI-Pipeline-new/CPI-Pipeline-master/scripts/ppi-benchmark

corpusDir=${baseDir}/Corpora
dbDir=${baseDir}/Database
kernelDir=${baseDir}/Kernels
expDir=${baseDir}/Experiments

origDir=${corpusDir}/Original-Modified
#origDir=${corpusDir}/Original-Modified
workDir=${corpusDir}/Work
#export origDir=${corpusDir}/test
#$(warning origdir=$(origDir))
export splitDir=${corpusDir}/Splits

FayruzovDir=${kernelDir}/Fayruzov

FayruzovLib=${FayruzovDir}/libs
FayruzovJar=${FayruzovDir}/dist/fayruzov.jar
FayruzovCP=${FayruzovJar}$(SEP)${FayruzovLib}/*
FayruzovAllDirs=--basedir ${FayruzovDir} --corpdir ${corpusDir} --lfdir ${libSVMLF} --expdir ${expDir}/KimKernel

# learning-format-api
LFbaseDir=${baseDir}/Converters/learning-format-api
LF_CLASSPATH=${LFbaseDir}/lib/*
LF_JAR=${LFbaseDir}/dist/lfapi.jar


APGdata=${corpusDir}/APG
APGsplit=${corpusDir}/splits-test-train

SLdata=${corpusDir}/SL/training-format
Editdata=${corpusDir}/edit/training-format
Cosinedata=${corpusDir}/cosine/training-format

APGexperiment=${expDir}/APG

libSVMLF=${corpusDir}/libSVM-learning-format

jsreDir=${kernelDir}/jsre

jsreBase=${jsreDir}/source
jsreJar=${jsreBase}/dist/xjsre.jar

propsDir=${FayruzovDir}/resource/props
propsConv=${FayruzovDir}/propsconv

# Database

PSQLCONNECT=psql -h localhost -U ammar #-h racer #10.0.0.2 -U ppi 
# modified from ppi
#DBNAME=ppi_retrained
DBNAME=ppi
PSQL=${PSQLCONNECT} -v "ON_ERROR_STOP=1" ${DBNAME}
PSQLWARN=${PSQLCONNECT} ${DBNAME}

# Java-specific parameters
JAVA=java -XX:+UseCompressedOops

# OS-dependent classpath separator
UNAME := $(shell uname)
SEP=;
ifeq ($(UNAME), Linux)
SEP=:
endif
ifeq ($(UNAME), Solaris)
SEP=:
endif

# memory
MEM1=-Xmx1024m -XX:MaxPermSize=256m -XX:-UseGCOverheadLimit
MEM2=-Xmx2048m -XX:MaxPermSize=256m -XX:-UseGCOverheadLimit
MEM3=-Xmx4096m -XX:MaxPermSize=256m -XX:-UseGCOverheadLimit

numberofcores=$(shell grep -c -E '^model name' /proc/cpuinfo) 
numberofprocs=$(shell echo "(${numberofcores}+1)/2" | bc)

XARGSquiet=nice xargs --max-procs ${numberofprocs} --no-run-if-empty
XARGS=${XARGSquiet} --verbose

#Reduce to a single corpus 
#linked to this error: Makefile.config:142: *** FATAL ERROR: "Missing split directory: ppi-temp/Corpora/Splits/LLL HPRD50 AIMed BioInfer IEPA".  Stop.
BENCHMARKCORPORA=DS1 #DS1 #DS2 # DS3 #LLL #HPRD50 AIMed BioInfer IEPA

CORPORA=$(BENCHMARKCORPORA)
TEST_CORPORA=DS1 #DS1 #DS2 # DS3 #LLL HPRD50

KERNELS=APG #SL #ST SST PT SpT kBSPS APG cosine edit SL Kim
EXPTYPES=CV #CL #CV# CC CL

KimKernelType=syn lex pos comp

CorporaXML=$(foreach c,$(CORPORA),${origDir}/$(c).xml)

BenchmarkXML=$(foreach c,$(BENCHMARKCORPORA),${origDir}/$(c).xml)

EnrichedXML=$(foreach c,$(CORPORA),${stlfDir}/$(c).xml)

NUMCORPORA=$(shell echo $(CORPORA) | wc -w)

# Experiments

runSynTree=${kernelDir}/SVM-Light-1.5-to-be-released/trunk
runSpT=${kernelDir}/svm_light/branches/svm_light_spectrum_tree_kernel
runkBSPS=${kernelDir}/svm_light/trunk

kernelHome=$(baseDir)# should be overridden
learner=$(kernelHome)/svm_learn
tester=$(kernelHome)/svm_classify

$(learner) $(tester):
	@test -f "$@" || ( cd "$(kernelHome)" && make all )

# Corpora

#stlfDir=${corpusDir}/Syntax-Tree-Learning-Format-Modified
stlfDir=${corpusDir}/Syntax-Tree-Learning-Format
lfDir=${corpusDir}/learning-format


all:
	$(info check usage with 'make help')

extract-all:
	@find "$(DIRECTORY)" -maxdepth 1 \( -name "*.tar.gz" -or -name "*.tgz" \) -exec tar -zxv --directory "$(DIRECTORY)" -f '{}' \;
	@find "$(DIRECTORY)" -maxdepth 1 -name "*.zip" -exec unzip -zxv --directory "$(DIRECTORY)" -f '{}' \;
	@find "$(DIRECTORY)" -maxdepth 1 -name "*.gz" -not -name "*.tar.gz" -exec bash -c "cd '$(DIRECTORY)' && gunzip '{}' " \;

download-extract:
	@if test -d "${DIRECTORY}" ; \
	then echo "Assuming '${DIRECTORY}' is up-to-date, delete/rename it to force downloading again." ; \
	else $(MAKE) download-extract-always DIRECTORY="$(DIRECTORY)" URL="${URL}" ; \
	fi

download-extract-always:
	mkdir -p "$(DIRECTORY)"
	wget -nc --directory-prefix="$(DIRECTORY)" "$(URL)"
	$(MAKE) extract-all DIRECTORY="$(DIRECTORY)" 

download-modified:
	echo "### file downloaded and extracted manually ###"

err:
	$(error FATAL ERROR: "$(MSG)")

.PHONY: err 


# Validate variable CORPUS
check-corpus:
ifndef CORPUS
	$(error FATAL ERROR: Variable CORPUS undefined.)
else
ifeq ($(filter $(CORPUS),$(CORPORA)),)
	$(error No valid corpus: $(CORPUS))
endif
ifneq ($(filter-out $(CORPORA),$(CORPUS)),)
	$(error Invalid corpus $(CORPUS))
endif
endif

# Validate variable EXPTYPE
check-expType-more:
ifndef EXPTYPE
	$(error FATAL ERROR: Variable EXPTYPE undefined.)
else
ifeq ($(filter $(EXPTYPE),$(EXPTYPES)),)
	$(error No valid expType $(EXPTYPE))
endif
ifneq ($(filter-out $(EXPTYPES),$(EXPTYPE)),)
	$(error Invalid expType $(EXPTYPE))
endif
endif

# Validate variable EXPTYPE
check-expType:
ifndef EXPTYPE
	$(error FATAL ERROR: Variable EXPTYPE undefined.)
else
ifeq ($(EXPTYPE),)
	$(error Empty expType $(EXPTYPE))
endif
ifneq ($(shell echo $(EXPTYPE) | wc -w),1)
	$(error Too many expType: $(EXPTYPE))
endif
ifneq ($(filter $(EXPTYPE),$(EXPTYPES)),$(EXPTYPE))
	$(error Invalid single expType: $(EXPTYPE))
endif
ifneq ($(EXPTYPE),CV)
  ifneq ($(EXPTYPE),CC)
    ifneq ($(EXPTYPE),CL)
        $(error invalid or missing expType: $(EXPTYPE))
    endif
  endif
endif
endif

# Validate variable KERNEL
check-kernel:
ifndef KERNEL
	$(error FATAL ERROR: Variable KERNEL undefined.)
else
ifeq ($(KERNEL),)
	$(error Empty kernel $(KERNEL))
endif
ifneq ($(shell echo $(KERNEL) | wc -w),1)
	$(error Too many kernels: $(KERNEL))
endif
ifneq ($(filter $(KERNEL),$(KERNELS)),$(KERNEL))
	$(error Invalid single kernel: $(KERNEL))
endif
endif



${LF_JAR}:
	cd "${LFbaseDir}" && ant clean jar 
